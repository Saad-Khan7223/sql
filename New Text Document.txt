CREATE DATABASE IF NOT EXISTS  aptech;
DROP DATABASE IF  EXISTS  aptech;
SHOW DATABASES;

/////////// Table//////////


///////////CREATE///////////
CREATE TABLE IF NOT EXISTS products (product_id INT UNSIGNED AUTO_INCREMENT NOT NUll, product_code CHAR(5) NOT NULL,product_name VARCHAR(255) NOT NULL,product_quantity INT UNSIGNED DEFAULT 0  NOT NULL, product_price DECIMAL(10,2) DEFAULT 999.99 NOT NULL, PRIMARY KEY (product_id));

////////////INSERT/////////
INSERT INTO products (product_id,product_code,product_name,product_quantity,product_price) VALUES (101,"mark","redMarker",1500,15);

INSERT INTO products VALUES (NUll,"mark","redMarker",1500,15),(NUll,"penc","pencil2B",2000,10),(NUll,"mark","blackMarker",500,20),(NUll,"penc","pencil2H",1500,25);


INSERT INTO products (product_code,product_name)values ("mark","greenMarker");

INSERT INTO products ('product_code','product_name')values ("mark","greenMarker");

/////// SELECT////////////

SELECT * FROM `products`;

SELECT products.product_id, products.product_name FROM products;

SELECT products.product_id, products.product_name FROM products WHERE products.product_id<=103;

SELECT products.product_id, products.product_name FROM products WHERE products.product_id>=103;

SELECT products.product_id, products.product_name FROM products WHERE products.product_name="redMarker";

SELECT products.product_id, products.product_name FROM products WHERE products.product_name!="redMarker";


//////Like/////

SELECT * FROM products WHERE product_name LIKE '%marker';
SELECT * FROM products WHERE products.product_name LIKE '%en%r';
SELECT * FROM products WHERE products.product_name NOT LIKE 'r_d%';

SELECT * FROM products WHERE products.product_name NOT LIKE 'r_d%' AND products.product_code="mark";

////////IN NOT IN////////////


SELECT * FROM products WHERE products.product_name="redMarker" OR products.product_name="BlueMarker" OR products.product_name="greenMarker" ;

SELECT * FROM products WHERE products.product_name IN('redMarker','greenmarker','bluemarker');

SELECT * FROM products WHERE products.product_name NOT IN('redMarker','greenmarker','bluemarker');


////////IS NULL  IS NOT NULL////////////
SELECT * FROM products WHERE products.product_code IS NULL;
SELECT * FROM products WHERE products.product_code IS NOT NULL;

////////ORDER BY and Limit////////////

SELECT * FROM products WHERE products.product_name LIKE '_e%' ORDER BY products.product_code DESC;

SELECT * FROM products WHERE products.product_name LIKE '_e%' ORDER BY products.product_code ASC;


SELECT * FROM products WHERE products.product_name LIKE '_e%' ORDER BY products.product_code ASC LIMIT 2;

SELECT * FROM products LIMIT 2,3;


///////Alias use for only display purpose/////////////

SELECT products.product_id as "ID" , products.product_name as "Name"  FROM `products`;


///////concatenation ///////////
SELECT concat(products.product_code,'-',products.product_name) as "Description", products.product_id as 'ID'  FROM `products`;
#if null it gives null

/////////Distinct Clause////////////////
#removes duplicate and gives first value from duplicates column values, consider null value;

SELECT  DISTINCT product_price product_name  FROM `products`;

////////////Group BY///////////
The GROUP BY clause groups rows based on the values in a specific column and returns only one row for each unique value.

SELECT *  FROM `products` GROUP BY product_price;


//////Having clause use with group by///////////

SELECT product_id as "ID", product_code as "Code", product_name as 'Name', product_quantity as 'Quantity' , product_price as "price", COUNT(*) as 'count' from products GROUP BY product_code HAVING count>2;


//////////// UPDATE///////////////
update products set product_price=30 where product_id=103;
# if not use where it will change all coloumn values

/////////////Delete///////////////////////////
DELETE FROM products where product_id=103;


//////////Alter Table////////////////
# for delete column
ALTER table products DROP COLUMN order_id; 
ALTER table products ADD COLUMN order_id;
ALTER table products Change COlumn order_id  orderno int;


//////////Rename/////////////////////////////
ALTER table products Rename To products_master


//////////Forigen Key//////////////////////////
ALTER table products ADD COLUMN supplier_id;
UPDATE products_master SET supplier_id=1;
ALTER TABLE products_master ADD FOREIGN KEY(supplier_id) REFERENCES supplier(supplier_id);


//////////// joins//////////////////

CREATE TABLE orders(order_id int unsigned not null AUTO_INCREMENT, order_name varchar(255) not null, company varchar(255) not null, PRIMARY key(order_id));


CREATE TABLE products(product_id int unsigned not null AUTO_INCREMENT,product_name varchar(255) not null, productCode char(5) not null,product_price decimal(10,2),order_id int unsigned not null, PRIMARY key(product_id), CONSTRAINT fk_order FOREIGN KEY(order_id) REFERENCES orders(order_id));

for product table
INSERT INTO products VALUES (101,"greenMarker",'mark',25,1),(null,"redMarker",'mark',25,1),(null,"blueMarker",'mark',30,2),(null,"Inkpen",'pen',50,2),(null,"ballpen",'pen',15,2),(null,"pointer",'point',20,2),(null,"pencil",'penc',10,3),(null,"Bluepencil",'penc',15,3),
(null,"Greenpencil",'penc',20,3);


for orders table
INSERT INTO orders VALUES(1,"mark","abc"),(2,"pen","xyz"),(3,"penc","def")

1-inner join or join
SELECT * from products JOIN orders on products.order_id=orders.order_id;

SELECT * from products JOIN orders on products.order_id=orders.order_id WHERE orders.order_id=1;


2-left join
SELECT *
FROM products
LEFT JOIN orders
ON products.order_id = orders.order_id;


3-Right Join
SELECT *
FROM products
right JOIN orders
ON products.order_id = orders.order_id;


4-full join
SELECT *
FROM products
LEFT JOIN orders
ON products.order_id = orders.order_id
UNION ALl
SELECT *
FROM products
right JOIN orders
ON products.order_id = orders.order_id   WHERE products.product_id IS null;

5- cross join
SELECT *
FROM products cross join orders
